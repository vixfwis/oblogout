diff -ru src/oblogout/data/oblogout.conf src.new/oblogout/data/oblogout.conf
--- src/oblogout/data/oblogout.conf	2009-04-11 16:14:27.000000000 +0400
+++ src.new/oblogout/data/oblogout.conf	2020-05-15 13:20:43.247641000 +0300
@@ -1,5 +1,6 @@
 [settings]
 usehal = true
+monitor = -1
 
 [looks]
 opacity = 70
diff -ru src/oblogout/oblogout/__init__.py src.new/oblogout/oblogout/__init__.py
--- src/oblogout/oblogout/__init__.py	2020-05-15 13:46:02.563293500 +0300
+++ src.new/oblogout/oblogout/__init__.py	2020-05-15 13:49:45.212233000 +0300
@@ -127,13 +127,18 @@
          
         for button in self.button_list:
             self.__add_button(button, self.buttonpanel)        
-                                          
+
+        # Multihead
+        screen = self.window.get_screen()
+        if self.mon == -1:
+            self.mon = screen.get_monitor_at_window(screen.get_active_window())
+        geometry = screen.get_monitor_geometry(self.mon)
+
         if self.rendered_effects == True:    
             self.logger.debug("Stepping though render path")
             w = gtk.gdk.get_default_root_window()
-            sz = w.get_size()
-            pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB,False,8,sz[0],sz[1])
-            pb = pb.get_from_drawable(w,w.get_colormap(),0,0,0,0,sz[0],sz[1])
+            pb = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB,False,8,geometry[2],geometry[3])
+            pb = pb.get_from_drawable(w,w.get_colormap(),geometry[0],geometry[1],0,0,geometry[2],geometry[3])
 
             self.logger.debug("Rendering Fade")
             # Convert Pixbuf to PIL Image
@@ -160,13 +165,13 @@
             pixmap = None
     
         self.window.set_app_paintable(True)
-        self.window.resize(gtk.gdk.screen_width(), gtk.gdk.screen_height())
+        self.window.resize(geometry[2], geometry[3])
         self.window.realize()
                 
         if pixmap:
             self.window.window.set_back_pixmap(pixmap, False)
-        self.window.move(0,0)
-        
+        self.window.move(geometry[0], geometry[1])
+
 
     def load_config(self, config):
         """ Load the configuration file and parse entries, when encountering a issue
@@ -176,7 +181,7 @@
         self.parser.read(config)
         
         # Set some safe defaults
-	self.lock_before_suspend = False
+        self.lock_before_suspend = False
         self.opacity = 50
         self.button_theme = "default"
         self.bgcolor = gtk.gdk.color_parse("black")
@@ -190,8 +195,13 @@
             else:
                 self.usehal = True
 
-	    if self.parser.has_option("settings","lock_before_suspend"):
-		self.lock_before_suspend = self.parser.getboolean("settings","lock_before_suspend")
+            if self.parser.has_option("settings","monitor"):
+                self.mon = self.parser.getint("settings","monitor")
+            else:
+                self.mon = -1
+
+        if self.parser.has_option("settings","lock_before_suspend"):
+            self.lock_before_suspend = self.parser.getboolean("settings","lock_before_suspend")
             
         if self.usehal:    
             from dbushandler import DbusController
@@ -207,19 +217,19 @@
                 self.button_theme = self.parser.get("looks", "buttontheme")
                 
             if self.parser.has_option("looks", "bgcolor"):  
-            	try:
-                	self.bgcolor = gtk.gdk.color_parse(self.parser.get("looks", "bgcolor"))
+                try:
+                    self.bgcolor = gtk.gdk.color_parse(self.parser.get("looks", "bgcolor"))
                 except:
-                	self.logger.warning(_("Color %s is not a valid color, defaulting to black") % self.parser.get("looks", "bgcolor"))
-                	self.bgcolor = gtk.gdk.color_parse("black")
+                    self.logger.warning(_("Color %s is not a valid color, defaulting to black") % self.parser.get("looks", "bgcolor"))
+                    self.bgcolor = gtk.gdk.color_parse("black")
                 
             if self.parser.has_option("looks", "opacity"):
                 blist = self.parser.get("looks", "buttons")
-	    
+        
         # Parse shortcuts section and load them into a array for later reference.
-	    if self.parser.has_section("shortcuts"):
-	        self.shortcut_keys = self.parser.items("shortcuts")
-	        self.logger.debug("Shortcut Options: %s" % self.shortcut_keys)
+        if self.parser.has_section("shortcuts"):
+            self.shortcut_keys = self.parser.items("shortcuts")
+            self.logger.debug("Shortcut Options: %s" % self.shortcut_keys)
 
          
         # Parse in commands section of the configuration file. Check for valid keys and set the attribs on self
@@ -368,8 +378,8 @@
         elif (data == 'suspend'):
             self.window.hide()
 
-	    if(self.lock_before_suspend):
-	        self.__exec_cmd(self.cmd_lock)
+        if(self.lock_before_suspend):
+            self.__exec_cmd(self.cmd_lock)
 
             if self.usehal:
                 self.dbus.suspend()
@@ -380,8 +390,8 @@
         elif (data == 'hibernate'):
             self.window.hide()
 
-	    if(self.lock_before_suspend):
-	        self.__exec_cmd(self.cmd_lock)
+        if(self.lock_before_suspend):
+            self.__exec_cmd(self.cmd_lock)
 
             if self.usehal:
                 self.dbus.hibernate()
